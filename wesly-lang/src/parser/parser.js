// @ts-nocheck
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,56],$V2=[1,13],$V3=[1,22],$V4=[1,57],$V5=[1,72],$V6=[1,58],$V7=[1,10],$V8=[1,11],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,45],$Vf=[1,46],$Vg=[1,47],$Vh=[1,48],$Vi=[1,59],$Vj=[1,60],$Vk=[1,61],$Vl=[1,62],$Vm=[1,63],$Vn=[1,64],$Vo=[1,65],$Vp=[1,66],$Vq=[1,67],$Vr=[4,20,21,27,28,29,33,37,39,53,57,77,79,80,81,84,131,132,140,141,155,156,157,158,159,160,161,162,163],$Vs=[1,76],$Vt=[1,83],$Vu=[1,85],$Vv=[25,56,93,94,95,96,97,98,99,100,101,102],$Vw=[2,116],$Vx=[1,95],$Vy=[1,96],$Vz=[2,131],$VA=[7,23,25,26,29,38,56,93,94,95,96,97,98,99,100,101,102],$VB=[7,23,25,26,29,38,56,93,94,95,96,97,98,99,100,101,102,104,106],$VC=[1,116],$VD=[7,23,25,26,29,38,56,93,94,95,96,97,98,99,100,101,102,104,106,108],$VE=[1,117],$VF=[7,23,25,26,29,38,56,93,94,95,96,97,98,99,100,101,102,104,106,108,110],$VG=[1,118],$VH=[7,23,25,26,29,38,56,93,94,95,96,97,98,99,100,101,102,104,106,108,110,112],$VI=[1,119],$VJ=[7,23,25,26,29,38,56,93,94,95,96,97,98,99,100,101,102,104,106,108,110,112,114],$VK=[1,121],$VL=[1,122],$VM=[7,23,25,26,29,38,56,93,94,95,96,97,98,99,100,101,102,104,106,108,110,112,114,117,118],$VN=[1,124],$VO=[1,125],$VP=[1,126],$VQ=[1,127],$VR=[7,23,25,26,29,38,56,93,94,95,96,97,98,99,100,101,102,104,106,108,110,112,114,117,118,121,122,123,124],$VS=[1,129],$VT=[1,130],$VU=[7,23,25,26,29,38,56,93,94,95,96,97,98,99,100,101,102,104,106,108,110,112,114,117,118,121,122,123,124,127,128],$VV=[1,132],$VW=[1,133],$VX=[7,23,25,26,29,38,56,93,94,95,96,97,98,99,100,101,102,104,106,108,110,112,114,117,118,121,122,123,124,127,128,131,132],$VY=[1,135],$VZ=[1,136],$V_=[1,137],$V$=[7,23,25,26,29,38,56,93,94,95,96,97,98,99,100,101,102,104,106,108,110,112,114,117,118,121,122,123,124,127,128,131,132,135,136,137],$V01=[7,23,25,26,29,38,56,93,94,95,96,97,98,99,100,101,102,104,106,108,110,112,114,117,118,121,122,123,124,127,128,131,132,135,136,137,144,145],$V11=[20,21,27,33,37,39,131,132,140,141,155,156,157,158,159,160,161,162,163],$V21=[7,21,23,25,26,29,37,38,56,93,94,95,96,97,98,99,100,101,102,104,106,108,110,112,114,117,118,121,122,123,124,127,128,131,132,135,136,137,144,145,147],$V31=[1,146],$V41=[1,156],$V51=[1,157],$V61=[1,158],$V71=[1,159],$V81=[1,160],$V91=[1,161],$Va1=[1,162],$Vb1=[14,15,16,17,18,19,20,27,33,37],$Vc1=[7,56],$Vd1=[1,166],$Ve1=[7,14,15,16,17,18,19,20,25,27,33,37,56],$Vf1=[2,45],$Vg1=[2,62],$Vh1=[4,7,20,21,23,25,26,27,28,29,33,37,38,39,53,56,57,77,79,80,81,83,84,93,94,95,96,97,98,99,100,101,102,104,106,108,110,112,114,117,118,121,122,123,124,127,128,131,132,135,136,137,140,141,144,145,147,155,156,157,158,159,160,161,162,163],$Vi1=[25,29],$Vj1=[1,223],$Vk1=[7,23,25,28,29,33,56],$Vl1=[23,25],$Vm1=[29,33],$Vn1=[7,25],$Vo1=[2,75],$Vp1=[1,291];
var parser = {trace: function trace () {
        Jison.print.apply(null, arguments);
    },
yy: {},
symbols_: {"error":2,"Program":3,"EOF":4,"Declarations":5,"Sep":6,";":7,"TypeDeclaration":8,"Identifier":9,"AtomicType":10,"FunctionType":11,"ObjectType":12,"ArrayType":13,"int":14,"float":15,"char":16,"string":17,"bool":18,"void":19,"func":20,"(":21,"FunctionTypeParameterList":22,")":23,"FunctionReturnType":24,",":25,":":26,"object":27,"{":28,"}":29,"ObjectFieldDeclarationList":30,"NamedTypeList":31,"NamedType":32,"IDENT":33,"ArrayDimensionList":34,"ValidArrayType":35,"ArrayDimension":36,"[":37,"]":38,"INT":39,"Declaration":40,"VarDeclaration":41,"ConstDeclaration":42,"FunctionDeclaration":43,"ObjectDeclaration":44,"Statement":45,"InitDeclaratorList":46,"InitDeclarator":47,"InitTypedDeclaratorList":48,"InitTypedDeclarator":49,"Initializer":50,"Expression":51,"InitializerList":52,"var":53,"VarType":54,"VarValue":55,"=":56,"const":57,"ConstType":58,"ConstValue":59,"FunctionParameterDeclarationList":60,"FunctionReturn":61,"FunctionBody":62,"ParamList":63,"VariadicDeclaration":64,"Param":65,"...":66,"ValidVariadicType":67,"BlockStatement":68,"ObjectField":69,"ReturnStatement":70,"BreakStatement":71,"ContinueStatement":72,"IfStatement":73,"LoopStatement":74,"AssignmentStatement":75,"ExpressionStatement":76,"return":77,"ReturnAction":78,"break":79,"continue":80,"if":81,"ElseStatement":82,"else":83,"loop":84,"LoopBody":85,"LoopInit":86,"LoopCond":87,"LoopPost":88,"Lhs":89,"AssigmentOperator":90,"Rhs":91,"ConditionalExpression":92,"+=":93,"-=":94,"*=":95,"/=":96,"%=":97,"&=":98,"|=":99,"^=":100,"<<=":101,">>=":102,"LogicalOrExpression":103,"?":104,"LogicalAndExpression":105,"||":106,"OrExpression":107,"&&":108,"XorExpression":109,"|":110,"AndExpression":111,"^":112,"EqualityExpression":113,"&":114,"RelationalExpression":115,"EqualityOperator":116,"==":117,"!=":118,"ShiftExpression":119,"RelationalOperator":120,"<":121,">":122,"<=":123,">=":124,"AdditiveExpression":125,"ShiftOperator":126,"<<":127,">>":128,"MultiplicativeExpression":129,"AdditiveOperator":130,"+":131,"-":132,"UnaryExpression":133,"MultiplicativeOperator":134,"*":135,"/":136,"%":137,"UpdateExpression":138,"UnaryOperator":139,"~":140,"!":141,"PostfixExpression":142,"PostfixOperator":143,"++":144,"--":145,"PrimaryExpression":146,".":147,"CallExpressionArguments":148,"ArgumentList":149,"GroupExpression":150,"Literal":151,"FunctionExpression":152,"ObjectInitializationExpression":153,"ArrayInitializationExpression":154,"HEX":155,"BIN":156,"OCT":157,"FLOAT":158,"CHAR":159,"STRING":160,"true":161,"false":162,"nil":163,"ObjectInitializationListExpression":164,"ObjectArguments":165,"ObjectArgumentsExpression":166,"ArrayArguments":167,"ArrayArgumentInitializer":168,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",7:";",14:"int",15:"float",16:"char",17:"string",18:"bool",19:"void",20:"func",21:"(",23:")",25:",",26:":",27:"object",28:"{",29:"}",33:"IDENT",37:"[",38:"]",39:"INT",53:"var",56:"=",57:"const",66:"...",77:"return",79:"break",80:"continue",81:"if",83:"else",84:"loop",93:"+=",94:"-=",95:"*=",96:"/=",97:"%=",98:"&=",99:"|=",100:"^=",101:"<<=",102:">>=",104:"?",106:"||",108:"&&",110:"|",112:"^",114:"&",117:"==",118:"!=",121:"<",122:">",123:"<=",124:">=",127:"<<",128:">>",131:"+",132:"-",135:"*",136:"/",137:"%",140:"~",141:"!",144:"++",145:"--",147:".",155:"HEX",156:"BIN",157:"OCT",158:"FLOAT",159:"CHAR",160:"STRING",161:"true",162:"false",163:"nil"},
productions_: [0,[3,1],[3,2],[6,1],[8,1],[8,1],[8,1],[8,1],[8,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[11,5],[22,0],[22,1],[22,3],[24,0],[24,2],[12,3],[12,4],[31,1],[31,2],[32,2],[32,3],[13,2],[34,1],[34,2],[36,2],[36,3],[35,1],[35,1],[35,1],[35,1],[5,1],[5,2],[40,2],[40,2],[40,1],[40,1],[40,1],[46,1],[46,3],[47,1],[48,1],[48,3],[49,2],[50,1],[52,1],[52,3],[41,4],[54,0],[54,1],[55,0],[55,2],[42,4],[58,0],[58,1],[59,2],[43,7],[60,0],[60,1],[60,1],[60,3],[63,1],[63,3],[65,2],[64,3],[67,1],[67,1],[67,1],[67,1],[67,1],[61,0],[61,1],[62,1],[44,4],[44,5],[30,1],[30,2],[69,2],[45,1],[45,2],[45,2],[45,2],[45,1],[45,1],[45,2],[45,2],[68,2],[68,3],[70,2],[78,0],[78,1],[71,1],[72,1],[73,6],[82,0],[82,2],[82,2],[74,2],[74,5],[74,9],[86,0],[86,1],[86,1],[86,1],[87,0],[87,1],[88,0],[88,1],[88,3],[85,1],[75,3],[89,1],[89,3],[91,1],[91,3],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[76,1],[51,1],[92,1],[92,5],[103,1],[103,3],[105,1],[105,3],[107,1],[107,3],[109,1],[109,3],[111,1],[111,3],[113,1],[113,3],[116,1],[116,1],[115,1],[115,3],[120,1],[120,1],[120,1],[120,1],[119,1],[119,3],[126,1],[126,1],[125,1],[125,3],[130,1],[130,1],[129,1],[129,3],[134,1],[134,1],[134,1],[133,1],[133,2],[139,1],[139,1],[139,1],[139,1],[138,1],[138,2],[143,1],[143,1],[142,1],[142,5],[142,4],[142,4],[142,3],[148,0],[148,1],[149,1],[149,3],[146,1],[146,1],[146,1],[146,1],[146,1],[146,1],[150,3],[9,1],[151,1],[151,1],[151,1],[151,1],[151,1],[151,1],[151,1],[151,1],[151,1],[151,1],[152,6],[153,2],[153,2],[164,3],[164,4],[165,0],[165,1],[165,3],[166,3],[154,3],[154,4],[154,5],[167,1],[167,3],[168,1],[168,3],[168,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            {
                return [];
            }
        
break;
case 2:

            {
                return $$[$0-1];
            }
        
break;
case 4: case 5: case 6: case 7: case 8: case 20: case 32: case 33: case 34: case 35: case 40: case 41: case 45: case 49: case 54: case 56: case 59: case 60: case 70: case 71: case 72: case 73: case 74: case 76: case 77: case 83: case 87: case 88: case 95: case 101: case 106: case 107: case 108: case 110: case 114: case 132: case 133: case 135: case 137: case 139: case 141: case 143: case 145: case 149: case 155: case 159: case 163: case 168: case 174: case 178: case 184: case 187: case 188: case 189: case 190: case 191: case 192: case 219:

            {
                this.$ = $$[$0];
            }
        
break;
case 9:

            {
                this.$ = new yy.Types.IntType();
            }
        
break;
case 10:

            {
                this.$ = new yy.Types.FloatType();
            }
        
break;
case 11:

            {
                this.$ = new yy.Types.CharType();
            }
        
break;
case 12:

            {
                this.$ = new yy.Types.StringType();
            }
        
break;
case 13:

            {
                this.$ = new yy.Types.BoolType();
            }
        
break;
case 14: case 19: case 75:

            {
                this.$ = new yy.Types.VoidType();
            }
        
break;
case 15:

            {
                this.$ = new yy.Types.FuncType($$[$0-2], $$[$0]);
            }
        
break;
case 16: case 55: case 183: case 210:

            {
                this.$ = [];
            }
        
break;
case 17: case 23: case 28: case 36: case 43: case 46: case 50: case 66: case 80: case 112: case 116: case 118: case 185: case 211: case 217:

            {
                this.$ = [$$[$0]];
            }
        
break;
case 18: case 44: case 47: case 113: case 117: case 119: case 186: case 212: case 218:

            {
                $$[$0-2].push($$[$0]);
                this.$ = $$[$0-2];
            }
        
break;
case 21:

            {
                const fieldList = new yy.AST.FieldList([]);
                this.$ = new yy.Types.ObjType(fieldList);
            }
        
break;
case 22:

            {
                const fieldList = new yy.AST.FieldList($$[$0-1]);
                this.$ = new yy.Types.ObjType(fieldList);
            }
        
break;
case 24: case 29: case 37: case 81:

            {
                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            }
        
break;
case 25:

            {
                this.$ = new yy.Types.TypeSpec($$[$0-1], $$[$0]);
            }
        
break;
case 26:

            {
                this.$ = new yy.Types.TypeSpec($$[$0-2], $$[$0-1]);
            }
        
break;
case 27:

            {
                let arrayType = new yy.Types.ArrType($$[$0], $$[$0-1].pop());
                for (let i = $$[$0-1].length; i > 0; i--) {
                    arrayType = new yy.Types.ArrType(arrayType, $$[$0-1].pop());
                }
                this.$ = arrayType;
            }
        
break;
case 30: case 53: case 58: case 94: case 99: case 105: case 109: case 111:

            {
                this.$ = null;
            }
        
break;
case 31:

            {
                const intToken = new yy.Token($$[$0-1], 'INT', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.IntegerLiteral(intToken);
            }
        
break;
case 38: case 39: case 84: case 85: case 86: case 89: case 90: case 208:

            {
                this.$ = $$[$0-1];
            }
        
break;
case 42:

            {
                this.$ = new yy.AST.DeclStmt($$[$0]);
            }
        
break;
case 48:

            {
                this.$ = new yy.AST.Field([$$[$0-1]], $$[$0]);
            }
        
break;
case 51:

            {
                $$[$0-2].push($$[$0]);
            }
        
break;
case 52:

            {
                const decl = new yy.AST.ValueSpec('var', $$[$0-2], $$[$0], $$[$0-1]);
                this.$ = new yy.AST.VarDecl(decl);
            }
        
break;
case 57:

            {
                const decl = new yy.AST.ValueSpec('const', $$[$0-2], $$[$0], $$[$0-1]);
                this.$ = new yy.AST.ConstDecl(decl);
            }
        
break;
case 61:

            {
                this.$ = new yy.AST.FuncDecl($$[$0-5], $$[$0-3], $$[$0-1], $$[$0]);
            }
        
break;
case 62:

            {
                this.$ = new yy.AST.FieldList([]);
            }
        
break;
case 63:

            {
                this.$ = new yy.AST.FieldList($$[$0]);
            }
        
break;
case 64:

            {
                this.$ = new yy.AST.FieldList([$$[$0]]);
            }
        
break;
case 65:

            {
                $$[$0-2].push($$[$0]);
                this.$ = new yy.AST.FieldList($$[$0-2]);
            }
        
break;
case 67:

            {
                $$[$0-2].push($$[$0]);
                this.$ = $$[$0-2]
            }
        
break;
case 68: case 82:

            {
                this.$ = new yy.AST.Field($$[$0-1], $$[$0]);
            }
        
break;
case 69:

            {
                const type = new yy.Types.Variadic($$[$0]);
                this.$ = new yy.AST.Field([$$[$0-2]], type);
            }
        
break;
case 78:

            {
                const fieldList = new yy.AST.FieldList([]);
                const objType = new yy.Types.ObjType(fieldList);
                const spec = new yy.Types.TypeSpec($$[$0-2], objType);
                this.$ = new yy.AST.ObjDecl(spec);
            }
        
break;
case 79:

            {
                const fieldList = new yy.AST.FieldList($$[$0-1]);
                const objType = new yy.Types.ObjType(fieldList);
                const spec = new yy.Types.TypeSpec($$[$0-3], objType);
                this.$ = new yy.AST.ObjDecl(spec);
            }
        
break;
case 91:

            {
                this.$ = new yy.AST.Block([]);
            }
        
break;
case 92:

            {
                this.$ = new yy.AST.Block($$[$0-1]);
            }
        
break;
case 93:

            {
                this.$ = new yy.AST.ReturnStmt($$[$0]);
            }
        
break;
case 96:

            {
                this.$ = new yy.AST.BreakStmt();
            }
        
break;
case 97:

            {
                this.$ = new yy.AST.ContinueStmt();
            }
        
break;
case 98:

            {
                this.$ = new yy.AST.IfStmt($$[$0-3], $$[$0-1], $$[$0]);
            }
        
break;
case 100:

            {
                this.$ = $$[$0]
            }
        
break;
case 102:

            {
                this.$ = new yy.AST.LoopStmt('Undef', null, null, null, $$[$0]);
            }
        
break;
case 103:

            {
                this.$ = new yy.AST.LoopStmt('While', null, $$[$0-2], null, $$[$0]);
            }
        
break;
case 104:

            {
                this.$ = new yy.AST.LoopStmt('For', $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]);
            }
        
break;
case 115:

            {
                this.$ = new yy.AST.Assign($$[$0-2], $$[$0-1], $$[$0]);
            }
        
break;
case 120:

            {
                this.$ = new yy.Token($$[$0], '=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 121:

            {
                this.$ = new yy.Token($$[$0], '+=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 122:

            {
                this.$ = new yy.Token($$[$0], '-=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 123:

            {
                this.$ = new yy.Token($$[$0], '*=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 124:

            {
                this.$ = new yy.Token($$[$0], '/=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 125:

            {
                this.$ = new yy.Token($$[$0], '%=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 126:

            {
                this.$ = new yy.Token($$[$0], '&=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 127:

            {
                this.$ = new yy.Token($$[$0], '|=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 128:

            {
                this.$ = new yy.Token($$[$0], '^=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 129:

            {
                this.$ = new yy.Token($$[$0], '<<=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 130:

            {
                this.$ = new yy.Token($$[$0], '>>=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 131:

            {
                this.$ = new yy.AST.ExprStmt($$[$0]);
            }
        
break;
case 134:

            {
                this.$ = new yy.AST.Conditional($$[$0-4], $$[$0-2], $$[$0]);
            }
        
break;
case 136:

            {
                const lorToken = new yy.Token('||', '||', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.Logical($$[$0-2], lorToken, $$[$0]);
            }
        
break;
case 138:

            {
                const landToken = new yy.Token('&&', '&&', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.Logical($$[$0-2], landToken, $$[$0]);
            }
        
break;
case 140:

            {
                const binOrToken = new yy.Token('|', '|', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.Binary($$[$0-2], binOrToken, $$[$0]);
            }
        
break;
case 142:

            {
                const binXorToken = new yy.Token('^', '^', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.Binary($$[$0-2], binXorToken, $$[$0]);
            }
        
break;
case 144:

            {
                const binAndToken = new yy.Token('&', '&', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.Binary($$[$0-2], binAndToken, $$[$0]);
            }
        
break;
case 146: case 150: case 156: case 160: case 164:

            {
                this.$ = new yy.AST.Binary($$[$0-2], $$[$0-1], $$[$0]);
            }
        
break;
case 147:

            {
                this.$ = new yy.Token('==', '==', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 148:

            {
                this.$ = new yy.Token('!=', '!=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 151:

            {
                this.$ = new yy.Token('<', '<', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 152:

            {
                this.$ = new yy.Token('>', '>', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 153:

            {
                this.$ = new yy.Token('<=', '<=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 154:

            {
                this.$ = new yy.Token('>=', '>=', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 157:

            {
                this.$ = new yy.Token('<<', '<<', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 158:

            {
                this.$ = new yy.Token('>>', '>>', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 161: case 170:

            {
                this.$ = new yy.Token('+', '+', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 162: case 171:

            {
                this.$ = new yy.Token('-', '-', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 165:

            {
                this.$ = new yy.Token('*', '*', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 166:

            {
                this.$ = new yy.Token('/', '/', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 167:

            {
                this.$ = new yy.Token('%', '%', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 169:

            {
                this.$ = new yy.AST.Unary($$[$0-1], $$[$0]);
            }
        
break;
case 172:

            {
                this.$ = new yy.Token('~', '~', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 173:

            {
                this.$ = new yy.Token('!', '!', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 175:

            {
                this.$ = new yy.AST.Update($$[$0-1], $$[$0]);
            }
        
break;
case 176:

            {
                this.$ = new yy.Token('++', '++', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 177:

            {
                this.$ = new yy.Token('--', '--', yyleng, yylineno, yy.lexer.yylloc);
            }
        
break;
case 179:

            {
                this.$ = new yy.AST.Cast($$[$0-4], $$[$0-1]);
            }
        
break;
case 180:

            {
                this.$ = new yy.AST.ArrayMember($$[$0-1], $$[$0-3]);
            }
        
break;
case 181:

            {
                this.$ = new yy.AST.Call($$[$0-3], $$[$0-1]);
            }
        
break;
case 182:

            {
                this.$ = new yy.AST.ObjectMember($$[$0], $$[$0-2]);
            }
        
break;
case 193:

            {
                const groupExpr = new yy.AST.Group($$[$0-1]);
                this.$ = groupExpr;
            }
        
break;
case 194:

            {
                const identToken = new yy.Token($$[$0], 'IDENT', yyleng, yylineno, yy.lexer.yylloc);
                const identLiteral = new yy.AST.Identifier(identToken);
                this.$ = identLiteral;
            }
        
break;
case 195:

            {
                const intToken = new yy.Token($$[$0], 'INT', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.IntegerLiteral(intToken);
            }
        
break;
case 196:

            {
                const hexToken = new yy.Token($$[$0], 'HEX', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.IntegerLiteral(hexToken);
            }
        
break;
case 197:

            {
                const binToken = new yy.Token($$[$0], 'BIN', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.IntegerLiteral(binToken);
            }
        
break;
case 198:

            {
                const octToken = new yy.Token($$[$0], 'OCT', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.IntegerLiteral(octToken);
            }
        
break;
case 199:

            {
                const floatToken = new yy.Token($$[$0], 'FLOAT', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.FloatLiteral(floatToken);
            }
        
break;
case 200:

            {
                const charToken = new yy.Token($$[$0].replaceAll("'", ''), 'CHAR', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.CharLiteral(charToken);
            }
        
break;
case 201:

            {
                const strToken = new yy.Token($$[$0].replaceAll('"', ''), 'STRING', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.StringLiteral(strToken);
            }
        
break;
case 202:

            {
                const trueToken = new yy.Token($$[$0], 'true', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.BooleanLiteral(trueToken);
            }
        
break;
case 203:

            {
                const falseToken = new yy.Token($$[$0], 'false', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.BooleanLiteral(falseToken);
            }
        
break;
case 204:

            {
                const nilToken = new yy.Token($$[$0], 'nil', yyleng, yylineno, yy.lexer.yylloc);
                this.$ = new yy.AST.NilLiteral(nilToken);
            }
        
break;
case 205:

            {
                this.$ = new yy.AST.FuncExpr($$[$0-3], $$[$0-1], $$[$0]);
            }
        
break;
case 206:

            {
                this.$ = new yy.AST.ObjectInit($$[$0-1], $$[$0]);
            }
        
break;
case 207:

            {
                this.$ = new yy.AST.ObjectInlineInit($$[$0-1], $$[$0]);
            }
        
break;
case 209:

            {
                this.$ = $$[$0-2];
            }
        
break;
case 213:

            {
                this.$ = new yy.AST.ObjectField($$[$0-2], $$[$0]);
            }
        
break;
case 214:

            {
                this.$ = new yy.AST.ArrayInit($$[$0-2], []);
            }
        
break;
case 215:

            {
                this.$ = new yy.AST.ArrayInit($$[$0-3], $$[$0-1]);
            }
        
break;
case 216:

            {
                this.$ = new yy.AST.ArrayInit($$[$0-4], $$[$0-2]);
            }
        
break;
case 220:

            {
                this.$ = new yy.AST.ArrayInit(null, $$[$0-1]);
            }
        
break;
case 221:

            {
                this.$ = new yy.AST.ArrayInit(null, $$[$0-2]);
            }
        
break;
}
},
table: [{3:1,4:[1,2],5:3,9:51,12:68,13:69,20:$V0,21:$V1,27:$V2,28:$V3,33:$V4,34:70,36:71,37:$V5,39:$V6,40:4,41:5,42:6,43:7,44:8,45:9,51:29,53:$V7,57:$V8,68:14,70:15,71:16,72:17,73:18,74:19,75:20,76:21,77:$V9,79:$Va,80:$Vb,81:$Vc,84:$Vd,89:28,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{1:[3]},{1:[2,1]},{4:[1,73],9:51,12:68,13:69,20:$V0,21:$V1,27:$V2,28:$V3,33:$V4,34:70,36:71,37:$V5,39:$V6,40:74,41:5,42:6,43:7,44:8,45:9,51:29,53:$V7,57:$V8,68:14,70:15,71:16,72:17,73:18,74:19,75:20,76:21,77:$V9,79:$Va,80:$Vb,81:$Vc,84:$Vd,89:28,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($Vr,[2,36]),{6:75,7:$Vs},{6:77,7:$Vs},o($Vr,[2,40]),o($Vr,[2,41]),o($Vr,[2,42]),{9:80,33:$V4,46:78,47:79},{9:80,33:$V4,46:81,47:79},{9:82,21:$Vt,33:$V4},{9:84,28:$Vu,33:$V4},o($Vr,[2,83]),{6:86,7:$Vs},{6:87,7:$Vs},{6:88,7:$Vs},o($Vr,[2,87]),o($Vr,[2,88]),{6:89,7:$Vs},o($Vv,$Vw,{6:90,7:$Vs}),{5:92,9:51,12:68,13:69,20:$V0,21:$V1,27:$V2,28:$V3,29:[1,91],33:$V4,34:70,36:71,37:$V5,39:$V6,40:4,41:5,42:6,43:7,44:8,45:9,51:29,53:$V7,57:$V8,68:14,70:15,71:16,72:17,73:18,74:19,75:20,76:21,77:$V9,79:$Va,80:$Vb,81:$Vc,84:$Vd,89:28,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{7:[2,94],9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,51:94,78:93,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{7:[2,96]},{7:[2,97]},{21:[1,97]},{21:[1,99],28:$V3,68:100,85:98},{25:[1,102],56:[1,103],90:101,93:[1,104],94:[1,105],95:[1,106],96:[1,107],97:[1,108],98:[1,109],99:[1,110],100:[1,111],101:[1,112],102:[1,113]},o([7,25,56,93,94,95,96,97,98,99,100,101,102],$Vz),o($VA,[2,132]),o($VA,[2,133],{104:[1,114],106:[1,115]}),o($VB,[2,135],{108:$VC}),o($VD,[2,137],{110:$VE}),o($VF,[2,139],{112:$VG}),o($VH,[2,141],{114:$VI}),o($VJ,[2,143],{116:120,117:$VK,118:$VL}),o($VM,[2,145],{120:123,121:$VN,122:$VO,123:$VP,124:$VQ}),o($VR,[2,149],{126:128,127:$VS,128:$VT}),o($VU,[2,155],{130:131,131:$VV,132:$VW}),o($VX,[2,159],{134:134,135:$VY,136:$VZ,137:$V_}),o($V$,[2,163]),o($V$,[2,168],{143:138,144:[1,139],145:[1,140]}),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,131:$Ve,132:$Vf,133:141,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($V01,[2,174],{21:[1,144],37:[1,143],147:[1,142]}),o($V11,[2,170]),o($V11,[2,171]),o($V11,[2,172]),o($V11,[2,173]),o($V21,[2,178]),o($V21,[2,187]),o($V21,[2,188],{164:145,28:$V31}),o($V21,[2,189]),o($V21,[2,190]),o($V21,[2,191]),o($V21,[2,192]),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,51:147,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o([7,14,15,16,17,18,19,20,21,23,25,26,27,28,29,33,37,38,56,66,93,94,95,96,97,98,99,100,101,102,104,106,108,110,112,114,117,118,121,122,123,124,127,128,131,132,135,136,137,144,145,147],[2,194]),o($V21,[2,195]),o($V21,[2,196]),o($V21,[2,197]),o($V21,[2,198]),o($V21,[2,199]),o($V21,[2,200]),o($V21,[2,201]),o($V21,[2,202]),o($V21,[2,203]),o($V21,[2,204]),{28:$V31,164:148},{28:[1,149]},{9:152,10:153,11:154,12:155,14:$V41,15:$V51,16:$V61,17:$V71,18:$V81,19:$V91,20:$Va1,27:$Vy,33:$V4,35:150,36:151,37:$V5},o($Vb1,[2,28]),{38:[1,163],39:[1,164]},{1:[2,2]},o($Vr,[2,37]),o($Vr,[2,38]),o([4,7,20,21,23,25,27,28,29,33,37,39,53,57,77,79,80,81,84,131,132,140,141,155,156,157,158,159,160,161,162,163],[2,3]),o($Vr,[2,39]),o($Vc1,[2,53],{34:70,36:71,54:165,8:167,9:168,10:169,11:170,12:171,13:172,14:$V41,15:$V51,16:$V61,17:$V71,18:$V81,19:$V91,20:$Va1,25:$Vd1,27:$Vy,33:$V4,37:$V5}),o($Ve1,[2,43]),o($Ve1,$Vf1),{8:174,9:168,10:169,11:170,12:171,13:172,14:$V41,15:$V51,16:$V61,17:$V71,18:$V81,19:$V91,20:$Va1,25:$Vd1,27:$Vy,33:$V4,34:70,36:71,37:$V5,56:[2,58],58:173},{21:[1,175]},{9:180,23:$Vg1,33:$V4,46:181,47:79,60:176,63:177,64:178,65:179},{28:[1,182]},{9:80,29:[1,183],30:184,33:$V4,46:186,47:79,69:185},o($Vr,[2,84]),o($Vr,[2,85]),o($Vr,[2,86]),o($Vr,[2,89]),o($Vr,[2,90]),o($Vh1,[2,91]),{9:51,12:68,13:69,20:$V0,21:$V1,27:$V2,28:$V3,29:[1,187],33:$V4,34:70,36:71,37:$V5,39:$V6,40:74,41:5,42:6,43:7,44:8,45:9,51:29,53:$V7,57:$V8,68:14,70:15,71:16,72:17,73:18,74:19,75:20,76:21,77:$V9,79:$Va,80:$Vb,81:$Vc,84:$Vd,89:28,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{7:[2,93]},{7:[2,95]},{21:$Vt},{28:$Vu},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,51:188,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($Vr,[2,102]),{7:[2,105],9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,41:191,42:192,51:189,53:$V7,57:$V8,75:193,76:194,86:190,89:28,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($Vr,[2,114]),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,91:195,92:196,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,51:29,76:197,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($V11,[2,120]),o($V11,[2,121]),o($V11,[2,122]),o($V11,[2,123]),o($V11,[2,124]),o($V11,[2,125]),o($V11,[2,126]),o($V11,[2,127]),o($V11,[2,128]),o($V11,[2,129]),o($V11,[2,130]),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,51:198,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,105:199,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,107:200,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,109:201,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,111:202,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,113:203,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,115:204,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($V11,[2,147]),o($V11,[2,148]),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,119:205,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($V11,[2,151]),o($V11,[2,152]),o($V11,[2,153]),o($V11,[2,154]),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,125:206,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($V11,[2,157]),o($V11,[2,158]),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,129:207,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($V11,[2,161]),o($V11,[2,162]),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,131:$Ve,132:$Vf,133:208,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($V11,[2,165]),o($V11,[2,166]),o($V11,[2,167]),o($V01,[2,175]),o($V01,[2,176]),o($V01,[2,177]),o($V$,[2,169]),{9:210,21:[1,209],33:$V4},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,51:211,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{9:51,12:68,13:69,20:$Vx,21:$V1,23:[2,183],27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,51:214,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,148:212,149:213,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($V21,[2,206]),o($Vi1,[2,210],{165:215,166:216,9:217,33:$V4}),{23:[1,218]},o($V21,[2,207]),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,28:$Vj1,29:[1,219],33:$V4,34:70,36:71,37:$V5,39:$V6,51:222,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq,167:220,168:221},o($Vk1,[2,27]),o($Vb1,[2,29]),o($Vk1,[2,32]),o($Vk1,[2,33]),o($Vk1,[2,34]),o($Vk1,[2,35]),o($Vk1,[2,9]),o($Vk1,[2,10]),o($Vk1,[2,11]),o($Vk1,[2,12]),o($Vk1,[2,13]),o($Vk1,[2,14]),{21:[1,224]},o($Vb1,[2,30]),{38:[1,225]},{7:[2,55],55:226,56:[1,227]},{9:80,33:$V4,47:228},o($Vc1,[2,54]),o($Vk1,[2,4]),o($Vk1,[2,5]),o($Vk1,[2,6]),o($Vk1,[2,7]),o($Vk1,[2,8]),{56:[1,230],59:229},{56:[2,59]},{9:180,23:$Vg1,33:$V4,46:181,47:79,60:231,63:177,64:178,65:179},{23:[1,232]},{23:[2,63],25:[1,233]},{23:[2,64]},o($Vl1,[2,66]),o([14,15,16,17,18,19,20,25,27,33,37],$Vf1,{66:[1,234]}),{8:235,9:168,10:169,11:170,12:171,13:172,14:$V41,15:$V51,16:$V61,17:$V71,18:$V81,19:$V91,20:$Va1,25:$Vd1,27:$Vy,33:$V4,34:70,36:71,37:$V5},{9:80,29:[1,236],30:237,33:$V4,46:186,47:79,69:185},o($Vk1,[2,21]),{9:80,29:[1,238],33:$V4,46:186,47:79,69:239},o($Vm1,[2,80]),{8:240,9:168,10:169,11:170,12:171,13:172,14:$V41,15:$V51,16:$V61,17:$V71,18:$V81,19:$V91,20:$Va1,25:$Vd1,27:$Vy,33:$V4,34:70,36:71,37:$V5},o($Vh1,[2,92]),{23:[1,241]},o($Vv,$Vz,{23:[1,242]}),{6:243,7:$Vs},{7:[2,106]},{7:[2,107]},{7:[2,108]},o($Vv,$Vw),{7:[2,115],25:[1,244]},o($Vn1,[2,118]),o($Vv,[2,117]),{26:[1,245]},o($VB,[2,136],{108:$VC}),o($VD,[2,138],{110:$VE}),o($VF,[2,140],{112:$VG}),o($VH,[2,142],{114:$VI}),o($VJ,[2,144],{116:120,117:$VK,118:$VL}),o($VM,[2,146],{120:123,121:$VN,122:$VO,123:$VP,124:$VQ}),o($VR,[2,150],{126:128,127:$VS,128:$VT}),o($VU,[2,156],{130:131,131:$VV,132:$VW}),o($VX,[2,160],{134:134,135:$VY,136:$VZ,137:$V_}),o($V$,[2,164]),{8:246,9:168,10:169,11:170,12:171,13:172,14:$V41,15:$V51,16:$V61,17:$V71,18:$V81,19:$V91,20:$Va1,27:$Vy,33:$V4,34:70,36:71,37:$V5},o($V21,[2,182]),{38:[1,247]},{23:[1,248]},{23:[2,184],25:[1,249]},o($Vl1,[2,185]),{25:[1,251],29:[1,250]},o($Vi1,[2,211]),{26:[1,252]},o($V21,[2,193]),o($V21,[2,214]),{25:[1,254],29:[1,253]},o($Vi1,[2,217]),o($Vi1,[2,219]),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,28:$Vj1,33:$V4,34:70,36:71,37:$V5,39:$V6,51:222,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq,167:255,168:221},o($Vl1,[2,16],{34:70,36:71,9:168,10:169,11:170,12:171,13:172,22:256,8:257,14:$V41,15:$V51,16:$V61,17:$V71,18:$V81,19:$V91,20:$Va1,27:$Vy,33:$V4,37:$V5}),o($Vb1,[2,31]),{7:[2,52]},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,50:259,51:260,52:258,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($Ve1,[2,44]),{7:[2,57]},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,50:259,51:260,52:261,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{23:[1,262]},{8:264,9:168,10:169,11:170,12:171,13:172,14:$V41,15:$V51,16:$V61,17:$V71,18:$V81,19:$V91,20:$Va1,27:$Vy,28:$Vo1,33:$V4,34:70,36:71,37:$V5,61:263},{9:180,33:$V4,46:181,47:79,64:265,65:266},{9:268,10:269,11:270,12:271,13:272,14:$V41,15:$V51,16:$V61,17:$V71,18:$V81,19:$V91,20:$Va1,27:$Vy,33:$V4,34:70,36:71,37:$V5,67:267},o($Vl1,[2,68]),o($Vr,[2,78]),{9:80,29:[1,273],33:$V4,46:186,47:79,69:239},o($Vk1,[2,22]),o($Vm1,[2,81]),o($Vm1,[2,82]),{28:$V3,68:274},{28:$V3,68:100,85:275},{7:[2,109],9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,51:277,87:276,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,92:278,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,51:279,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{23:[1,280]},o($V21,[2,180]),o($V21,[2,181]),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,51:281,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($V21,[2,208]),{9:217,29:[1,282],33:$V4,166:283},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,51:284,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($V21,[2,215]),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,28:$Vj1,29:[1,285],33:$V4,34:70,36:71,37:$V5,39:$V6,51:222,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq,168:286},{25:[1,288],29:[1,287]},{23:[1,289],25:[1,290]},o($Vl1,[2,17]),{7:[2,56],25:$Vp1},o($Vn1,[2,50]),o($Vn1,[2,49]),{7:[2,60],25:$Vp1},{8:264,9:168,10:169,11:170,12:171,13:172,14:$V41,15:$V51,16:$V61,17:$V71,18:$V81,19:$V91,20:$Va1,27:$Vy,28:$Vo1,33:$V4,34:70,36:71,37:$V5,61:292},{28:$V3,62:293,68:294},{28:[2,76]},{23:[2,65]},o($Vl1,[2,67]),{23:[2,69]},{23:[2,70]},{23:[2,71]},{23:[2,72]},{23:[2,73]},{23:[2,74]},o($Vr,[2,79]),o($Vr,[2,99],{82:295,83:[1,296]}),o($Vr,[2,103]),{6:297,7:$Vs},{7:[2,110]},o($Vn1,[2,119]),o($VA,[2,134]),o($V21,[2,179]),o($Vl1,[2,186]),o($V21,[2,209]),o($Vi1,[2,212]),o($Vi1,[2,213]),o($V21,[2,216]),o($Vi1,[2,218]),o($Vi1,[2,220]),{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,28:$Vj1,29:[1,298],33:$V4,34:70,36:71,37:$V5,39:$V6,51:222,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq,168:286},o($Vk1,[2,19],{24:299,26:[1,300]}),{8:301,9:168,10:169,11:170,12:171,13:172,14:$V41,15:$V51,16:$V61,17:$V71,18:$V81,19:$V91,20:$Va1,27:$Vy,33:$V4,34:70,36:71,37:$V5},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,50:302,51:260,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},{28:$V3,62:303,68:294},o($V21,[2,205]),o([4,7,20,21,23,25,26,27,28,29,33,37,38,39,53,56,57,77,79,80,81,84,93,94,95,96,97,98,99,100,101,102,104,106,108,110,112,114,117,118,121,122,123,124,127,128,131,132,135,136,137,140,141,144,145,147,155,156,157,158,159,160,161,162,163],[2,77]),o($Vr,[2,98]),{28:$V3,68:305,73:304,81:$Vc},o($Vl1,[2,111],{92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,133:41,138:42,139:43,142:44,146:49,150:50,9:51,151:52,152:53,153:54,154:55,12:68,13:69,34:70,36:71,88:306,51:307,20:$Vx,21:$V1,27:$Vy,33:$V4,37:$V5,39:$V6,131:$Ve,132:$Vf,140:$Vg,141:$Vh,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq}),o($Vi1,[2,221]),o($Vk1,[2,15]),{8:308,9:168,10:169,11:170,12:171,13:172,14:$V41,15:$V51,16:$V61,17:$V71,18:$V81,19:$V91,20:$Va1,27:$Vy,33:$V4,34:70,36:71,37:$V5},o($Vl1,[2,18]),o($Vn1,[2,51]),o($Vr,[2,61]),o($Vr,[2,100]),o($Vr,[2,101]),{23:[1,309],25:[1,310]},o($Vl1,[2,112]),o($Vk1,[2,20]),{28:$V3,68:100,85:311},{9:51,12:68,13:69,20:$Vx,21:$V1,27:$Vy,33:$V4,34:70,36:71,37:$V5,39:$V6,51:312,92:30,103:31,105:32,107:33,109:34,111:35,113:36,115:37,119:38,125:39,129:40,131:$Ve,132:$Vf,133:41,138:42,139:43,140:$Vg,141:$Vh,142:44,146:49,150:50,151:52,152:53,153:54,154:55,155:$Vi,156:$Vj,157:$Vk,158:$Vl,159:$Vm,160:$Vn,161:$Vo,162:$Vp,163:$Vq},o($Vr,[2,104]),o($Vl1,[2,113])],
defaultActions: {2:[2,1],24:[2,96],25:[2,97],73:[2,2],93:[2,93],94:[2,95],174:[2,59],178:[2,64],191:[2,106],192:[2,107],193:[2,108],226:[2,52],229:[2,57],264:[2,76],265:[2,65],267:[2,69],268:[2,70],269:[2,71],270:[2,72],271:[2,73],272:[2,74],277:[2,110]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* single line comment */
break;
case 2:/* multi line comment */
break;
case 3:return 98
break;
case 4:return 99
break;
case 5:return 100
break;
case 6:return 101
break;
case 7:return 102
break;
case 8:return 127
break;
case 9:return 128
break;
case 10:return 93
break;
case 11:return 94
break;
case 12:return 95
break;
case 13:return 96
break;
case 14:return 97
break;
case 15:return 144
break;
case 16:return 145
break;
case 17:return 106
break;
case 18:return 108
break;
case 19:return 117
break;
case 20:return 118
break;
case 21:return 123
break;
case 22:return 124
break;
case 23:return 66
break;
case 24:return 131
break;
case 25:return 132
break;
case 26:return 135
break;
case 27:return 136
break;
case 28:return 137
break;
case 29:return 140
break;
case 30:return 114
break;
case 31:return 110
break;
case 32:return 112
break;
case 33:return 104
break;
case 34:return 121
break;
case 35:return 122
break;
case 36:return 56
break;
case 37:return 141
break;
case 38:return 21
break;
case 39:return 37
break;
case 40:return 28
break;
case 41:return 23
break;
case 42:return 38
break;
case 43:return 29
break;
case 44:return 25
break;
case 45:return 147
break;
case 46:return 7
break;
case 47:return 26
break;
case 48:return 53
break;
case 49:return 57
break;
case 50:return 81
break;
case 51:return 83
break;
case 52:return 20
break;
case 53:return 77
break;
case 54:return 84
break;
case 55:return 79
break;
case 56:return 80
break;
case 57:return 163
break;
case 58:return 161
break;
case 59:return 162
break;
case 60:return 27
break;
case 61:return 14
break;
case 62:return 15
break;
case 63:return 16
break;
case 64:return 17
break;
case 65:return 18
break;
case 66:return 19
break;
case 67:return 159
break;
case 68:return 160
break;
case 69:return 33
break;
case 70:return 158
break;
case 71:return 155
break;
case 72:return 156
break;
case 73:return 157
break;
case 74:return 39
break;
case 75:return 4
break;
case 76:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/(.*))/,/^(?:\/\*([^*]|\*+[^*/])*\*+\/)/,/^(?:&=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:<<=)/,/^(?:>>=)/,/^(?:<<)/,/^(?:>>)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:\.\.\.)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:~)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:\?)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:!)/,/^(?:\()/,/^(?:\[)/,/^(?:\{)/,/^(?:\))/,/^(?:\])/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:var\b)/,/^(?:const\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:func\b)/,/^(?:return\b)/,/^(?:loop\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:nil\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:object\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:bool\b)/,/^(?:void\b)/,/^(?:'([^'\\]|\\.)*')/,/^(?:"([^"\\]|\\.)*")/,/^(?:_*[a-zA-Z][_a-zA-Z0-9]*)/,/^(?:[0-9]*\.[0-9]+)/,/^(?:0x[0-9A-Fa-f]+)/,/^(?:0b[01]+)/,/^(?:0o[0-7]+)/,/^(?:[0-9]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


export default parser;
